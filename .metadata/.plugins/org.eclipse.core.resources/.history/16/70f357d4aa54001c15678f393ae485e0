/*
 * API_Teclado.c
 *
 *  Created on: 3 dic. 2021
 *      Author: martin
 */



#include "API_delay.h"
#include "stm32f4xx_hal.h"  		/* <- HAL include */
#include "stm32f4xx_nucleo_144.h" 	/* <- BSP include */

#define DURACION 10

// Variable de estado (global)


static delay_t timeToCheck;
static uint8_t columna;
static uint8_t fila;
static uint8_t tecla;
static uint8_t valor;
static uint8_t retorno;


void InicializarTeclado(void)
{
	columna = 1; // El teclado tiene 4 columnas, comenzamos por la 1ª

	delayInit(&timeToCheck, DURACION); // Iniciamos el timer para ir multiplexando el chequeo

	  GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOH_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOF_CLK_ENABLE();
	  __HAL_RCC_GPIOE_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();
	  __HAL_RCC_GPIOG_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, T_O1_Pin|T_O4_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, T_O2_Pin|T_O3_Pin, GPIO_PIN_RESET);



	  /*Configure GPIO pins : T_O1_Pin T_O4_Pin */
	  GPIO_InitStruct.Pin = T_O1_Pin|T_O4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	  /*Configure GPIO pin : T_I2_Pin */
	  GPIO_InitStruct.Pin = T_I2_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	  HAL_GPIO_Init(T_I2_GPIO_Port, &GPIO_InitStruct);

	  /*Configure GPIO pins : T_O2_Pin T_O3_Pin */
	  GPIO_InitStruct.Pin = T_O2_Pin|T_O3_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	  /*Configure GPIO pin : T_I1_Pin */
	  GPIO_InitStruct.Pin = T_I1_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	  HAL_GPIO_Init(T_I1_GPIO_Port, &GPIO_InitStruct);


	  /*Configure GPIO pins : T_I4_Pin T_I3_Pin */
	  GPIO_InitStruct.Pin = T_I4_Pin|T_I3_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	  HAL_GPIO_WritePin(T_O1_GPIO_Port, T_O1_Pin, GPIO_PIN_SET);  // encendemos la 1ª columna

	  tecla = 0;
	  valor = NADA;

}

// Función Actualizar MEF
uint8_t ChkTeclado(void)
{
	retorno = NADA; // valor por defecto con el cual retornar.

	if(delayRead(&timeToCheck)) // verificamos si es momento de cambiar de columna
	{
		fila = ChkFila(); // verificamos
		switch (columna)
		{
			case COLUMNA_1:
				HAL_GPIO_WritePin(T_O1_GPIO_Port, T_O1_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(T_O2_GPIO_Port, T_O2_Pin, GPIO_PIN_SET);
				columna = COLUMNA_2;
				if(tecla == 0)
				{
					tecla = fila;		// si no habia nada presionado, se guarda el valor del boton presionado

					if(0 != valor) // si al momento de haberse soltado el boton, habia un valor cargado, ese es el que debe ser informado
					{
						retorno = valor;
						valor = 0;
					}
				}
				else
				{
					if(tecla == fila) // Si el boton presionado es el mismo que hace 40 ms
					{
						if(1 == fila) valor = A_LEFT;
						if(2 == fila) valor = 7;
						if(3 == fila) valor = 4;
						if(4 == fila) valor = 1;
					}
				}
				break;



			default:
				InicializarMEF();
				break;
		}
	}

	return retorno;

}

uint8_t ChkFila(void){

}
